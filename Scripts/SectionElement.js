/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

angular
    .module("LayoutEditor")
    .directive("orcLayoutSection", ["scopeConfigurator", "environment",
        function (scopeConfigurator, environment) {
            return {
                restrict: "E",
                scope: { element: "=" },
                controller: ["$scope", "$element", "$attrs",
                    function ($scope, $element, $attrs) {
                        scopeConfigurator.configureForElement($scope, $element);
                        scopeConfigurator.configureForContainer($scope, $element);
                        $scope.sortableOptions["axis"] = "y";
                    }
                ],
                templateUrl: environment.templateUrl("Section"),
                replace: true
            };
        }
    ]);
var LayoutEditor;
(function (LayoutEditor) {

    LayoutEditor.Section = function (data, contentType, htmlId, htmlClass, htmlStyle, isTemplated, rule, children) {
        var self = this;
        // Inherit from the Element base class.
        LayoutEditor.Element.call(self, "Section", data, htmlId, htmlClass, htmlStyle, isTemplated, rule);
        // Inherit from the Container base class.
        LayoutEditor.Container.call(self, ["Canvas", "Grid", "Content"], children);
        // This Section element is containable, which means it can be added to any container, including Sections.
        self.isContainable = true;

        self.hasEditor = false;
        // The element type name, which is sent back to the element editor controller when being edited.
        self.contentType = contentType;
        // The "layout-common-holder" CSS class is used by the layout editor to identify drop targets.
        self.dropTargetClass = "layout-common-holder";
        // Implements the toObject serialization function.
        // This is called when the layout is being serialized into JSON.
        var toObject = self.toObject; // Get a reference to the default implementation before we override it.
        self.toObject = function () {
            var result = toObject(); // Invoke the original (base) implementation.
            result.children = self.childrenToObject();
            return result;
        };
    };

    // Registers the factory function with the element factory.
    LayoutEditor.registerFactory("Section", function (value) {
        return new LayoutEditor.Section(
            value.data,
            value.contentType,
            value.htmlId,
            value.htmlClass,
            value.htmlStyle,
            value.isTemplated,
            value.rule,
            LayoutEditor.childrenFrom(value.children));
    });

})(LayoutEditor || (LayoutEditor = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNlY3Rpb25FbGVtZW50LmpzIiwiRGlyZWN0aXZlLmpzIiwiTW9kZWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEFDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IlNlY3Rpb25FbGVtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOltudWxsLCJhbmd1bGFyXHJcbiAgICAubW9kdWxlKFwiTGF5b3V0RWRpdG9yXCIpXHJcbiAgICAuZGlyZWN0aXZlKFwib3JjTGF5b3V0U2VjdGlvblwiLCBbXCJzY29wZUNvbmZpZ3VyYXRvclwiLCBcImVudmlyb25tZW50XCIsXHJcbiAgICAgICAgZnVuY3Rpb24gKHNjb3BlQ29uZmlndXJhdG9yLCBlbnZpcm9ubWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgcmVzdHJpY3Q6IFwiRVwiLFxyXG4gICAgICAgICAgICAgICAgc2NvcGU6IHsgZWxlbWVudDogXCI9XCIgfSxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcIiRzY29wZVwiLCBcIiRlbGVtZW50XCIsIFwiJGF0dHJzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZUNvbmZpZ3VyYXRvci5jb25maWd1cmVGb3JFbGVtZW50KCRzY29wZSwgJGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZUNvbmZpZ3VyYXRvci5jb25maWd1cmVGb3JDb250YWluZXIoJHNjb3BlLCAkZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zb3J0YWJsZU9wdGlvbnNbXCJheGlzXCJdID0gXCJ5XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBlbnZpcm9ubWVudC50ZW1wbGF0ZVVybChcIlNlY3Rpb25cIiksXHJcbiAgICAgICAgICAgICAgICByZXBsYWNlOiB0cnVlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgXSk7IiwidmFyIExheW91dEVkaXRvcjtcclxuKGZ1bmN0aW9uIChMYXlvdXRFZGl0b3IpIHtcclxuXHJcbiAgICBMYXlvdXRFZGl0b3IuU2VjdGlvbiA9IGZ1bmN0aW9uIChkYXRhLCBjb250ZW50VHlwZSwgaHRtbElkLCBodG1sQ2xhc3MsIGh0bWxTdHlsZSwgaXNUZW1wbGF0ZWQsIHJ1bGUsIGNoaWxkcmVuKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIC8vIEluaGVyaXQgZnJvbSB0aGUgRWxlbWVudCBiYXNlIGNsYXNzLlxyXG4gICAgICAgIExheW91dEVkaXRvci5FbGVtZW50LmNhbGwoc2VsZiwgXCJTZWN0aW9uXCIsIGRhdGEsIGh0bWxJZCwgaHRtbENsYXNzLCBodG1sU3R5bGUsIGlzVGVtcGxhdGVkLCBydWxlKTtcclxuICAgICAgICAvLyBJbmhlcml0IGZyb20gdGhlIENvbnRhaW5lciBiYXNlIGNsYXNzLlxyXG4gICAgICAgIExheW91dEVkaXRvci5Db250YWluZXIuY2FsbChzZWxmLCBbXCJDYW52YXNcIiwgXCJHcmlkXCIsIFwiQ29udGVudFwiXSwgY2hpbGRyZW4pO1xyXG4gICAgICAgIC8vIFRoaXMgU2VjdGlvbiBlbGVtZW50IGlzIGNvbnRhaW5hYmxlLCB3aGljaCBtZWFucyBpdCBjYW4gYmUgYWRkZWQgdG8gYW55IGNvbnRhaW5lciwgaW5jbHVkaW5nIFNlY3Rpb25zLlxyXG4gICAgICAgIHNlbGYuaXNDb250YWluYWJsZSA9IHRydWU7XHJcblxyXG4gICAgICAgIHNlbGYuaGFzRWRpdG9yID0gZmFsc2U7XHJcbiAgICAgICAgLy8gVGhlIGVsZW1lbnQgdHlwZSBuYW1lLCB3aGljaCBpcyBzZW50IGJhY2sgdG8gdGhlIGVsZW1lbnQgZWRpdG9yIGNvbnRyb2xsZXIgd2hlbiBiZWluZyBlZGl0ZWQuXHJcbiAgICAgICAgc2VsZi5jb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlO1xyXG4gICAgICAgIC8vIFRoZSBcImxheW91dC1jb21tb24taG9sZGVyXCIgQ1NTIGNsYXNzIGlzIHVzZWQgYnkgdGhlIGxheW91dCBlZGl0b3IgdG8gaWRlbnRpZnkgZHJvcCB0YXJnZXRzLlxyXG4gICAgICAgIHNlbGYuZHJvcFRhcmdldENsYXNzID0gXCJsYXlvdXQtY29tbW9uLWhvbGRlclwiO1xyXG4gICAgICAgIC8vIEltcGxlbWVudHMgdGhlIHRvT2JqZWN0IHNlcmlhbGl6YXRpb24gZnVuY3Rpb24uXHJcbiAgICAgICAgLy8gVGhpcyBpcyBjYWxsZWQgd2hlbiB0aGUgbGF5b3V0IGlzIGJlaW5nIHNlcmlhbGl6ZWQgaW50byBKU09OLlxyXG4gICAgICAgIHZhciB0b09iamVjdCA9IHNlbGYudG9PYmplY3Q7IC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBiZWZvcmUgd2Ugb3ZlcnJpZGUgaXQuXHJcbiAgICAgICAgc2VsZi50b09iamVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRvT2JqZWN0KCk7IC8vIEludm9rZSB0aGUgb3JpZ2luYWwgKGJhc2UpIGltcGxlbWVudGF0aW9uLlxyXG4gICAgICAgICAgICByZXN1bHQuY2hpbGRyZW4gPSBzZWxmLmNoaWxkcmVuVG9PYmplY3QoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBSZWdpc3RlcnMgdGhlIGZhY3RvcnkgZnVuY3Rpb24gd2l0aCB0aGUgZWxlbWVudCBmYWN0b3J5LlxyXG4gICAgTGF5b3V0RWRpdG9yLnJlZ2lzdGVyRmFjdG9yeShcIlNlY3Rpb25cIiwgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMYXlvdXRFZGl0b3IuU2VjdGlvbihcclxuICAgICAgICAgICAgdmFsdWUuZGF0YSxcclxuICAgICAgICAgICAgdmFsdWUuY29udGVudFR5cGUsXHJcbiAgICAgICAgICAgIHZhbHVlLmh0bWxJZCxcclxuICAgICAgICAgICAgdmFsdWUuaHRtbENsYXNzLFxyXG4gICAgICAgICAgICB2YWx1ZS5odG1sU3R5bGUsXHJcbiAgICAgICAgICAgIHZhbHVlLmlzVGVtcGxhdGVkLFxyXG4gICAgICAgICAgICB2YWx1ZS5ydWxlLFxyXG4gICAgICAgICAgICBMYXlvdXRFZGl0b3IuY2hpbGRyZW5Gcm9tKHZhbHVlLmNoaWxkcmVuKSk7XHJcbiAgICB9KTtcclxuXHJcbn0pKExheW91dEVkaXRvciB8fCAoTGF5b3V0RWRpdG9yID0ge30pKTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
